version: 2.1

orbs:
  slack: circleci/slack@4.4.2

defaults: &default
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackname:
        type: string
        default: "frontend"   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.stackname >> --recursive
            aws cloudformation delete-stack --stack-name backend-<< parameters.stackname >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.stackname >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              npm run migrations:revert
            fi
          when: << parameters.when >>

  build-target:
    description: Build the environment.
    parameters:
      module:
        type: string
        default: "frontend"
      target:
        type: string
        default: "build"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [<< parameters.module >>-build]
      - run:
          command: |
            cd << parameters.module >>
            # npm i
            npm << parameters.target >>
      - save_cache:
          paths: [<< parameters.module >>/node_modules]
          key: << parameters.module >>-build

jobs:
  update-files:
    <<: *default
    steps:
      - checkout
      - run:
          name: Update About.html
          working_directory: ./app
          command: |
            sed -i -e "s/@WorkflowId@/${CIRCLE_WORKFLOW_ID:0:7}/;" templates/about.html
            sed -i -e "s/@GIT_COMMIT@/${CIRCLE_SHA1:0:7}/;" templates/about.html
            pwd
            ls -ltr
            cat templates/about.html
      - persist_to_workspace:
          root: ~/
          paths:
            - project/app


  lint-dockerfile:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          working_directory: ./app
          command: |
            python3 -m venv ~/.devops
            . ~/.devops/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            make lint

  create-and-upload-dockerimage:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Create and Upload Image to DockerHub
          working_directory: ./app
          command: |
            docker build --tag=abdocer123/udacity:capstone .
            docker image ls
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            sh upload_docker.sh

  create-cluster:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Create Cluster
          working_directory: ./eksCluster
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            aws ec2 describe-key-pairs --key-name capstone
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            sh create-cluster.sh

  deploy-cluster:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: deploy Cluster
          working_directory: ./eksCluster
          command: |
              sudo apt-get install openssl
              curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
              openssl sha1 -sha256 kubectl
              chmod +x ./kubectl
              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              echo "==============deployment started================="
              kubectl --v=6 apply -f deployment.yaml
              echo "==============Service Started===================="
              kubectl --v=6 apply -f service.yaml


workflows:
  default:
    jobs:
      - update-files
      - lint-dockerfile
      - create-and-upload-dockerimage:
          requires: [update-files,lint-dockerfile]
      - create-cluster:
          requires: [update-files]
      - deploy-cluster:
          requires: [create-and-upload-dockerimage, create-cluster]
