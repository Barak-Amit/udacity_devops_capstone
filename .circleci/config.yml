version: 2.1

orbs:
  slack: circleci/slack@4.4.2

defaults: &default
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackname:
        type: string
        default: "frontend"   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.stackname >> --recursive
            aws cloudformation delete-stack --stack-name backend-<< parameters.stackname >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.stackname >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              npm run migrations:revert
            fi
          when: << parameters.when >>

  build-target:
    description: Build the environment.
    parameters:
      module:
        type: string
        default: "frontend"
      target:
        type: string
        default: "build"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [<< parameters.module >>-build]
      - run:
          command: |
            cd << parameters.module >>
            # npm i
            npm << parameters.target >>
      - save_cache:
          paths: [<< parameters.module >>/node_modules]
          key: << parameters.module >>-build

jobs:
  update-files:
    <<: *default
    steps:
      - checkout
      - run:
          name: Update About.html
          working_directory: ./app
          command: |
            sed -i -e "s/@WorkflowId@/${CIRCLE_WORKFLOW_ID:0:7}/;" templates/about.html
            sed -i -e "s/@GIT_COMMIT@/${CIRCLE_SHA1:0:7}/;" templates/about.html
            pwd
            ls -ltr
            cat templates/about.html
      - persist_to_workspace:
          root: ~/
          paths:
            - project/app


  install-dependencies:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          working_directory: ./app
          command: |
            python3 -m venv ~/.devops
            . ~/.devops/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ~/
          key: v1-dependencies-{{ checksum "app/requirements.txt" }}

  lint-dockerfile:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - attach_workspace:
        at: ~/
      - run:
        working_directory: ./app
        command: |
          . ~/.devops/bin/activate
            make lint

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7b:f6:63:89:5a:98:02:a6:4d:aa:f9:30:a5:da:64:36"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment:
          stackname: udapeople-${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    docker:
      - image: circleci/node:12.22.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            npm install typescript

      - run:
          name: add values to backend/.env files
          no_output_timeout: 30m
          command: |
            cd ~/project/backend

            touch .env

            echo ENVIRONMENT=development >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo NODE_ENV=production >> ".env"

      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            cat .env
            npm run build
            npm run migrations > migration_status.txt
            cat migration_status.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - destroy-environment:
          stackname: udapeople-${CIRCLE_WORKFLOW_ID:0:7}    
 
  deploy-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            npm i
            export API_URL=$(curl -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          stackname: udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7b:f6:63:89:5a:98:02:a6:4d:aa:f9:30:a5:da:64:36"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      - destroy-environment:
          stackname: udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request GET https://api.memstash.io/values/BACKEND_URL)
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/index.html"
            if curl -s ${URL} | grep -q "Welcome"
            then
              return 0
            else 
              return 1
            fi
      - destroy-environment:
          stackname: udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text)
            echo $WorkflowID
            curl -H "Content-Type: text/plain" -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |

            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldID=$(curl -H "token: b95f8dc3-9ee8-4285-b889-af9c1b5e8329" --request GET https://api.memstash.io/values/WorkflowID)
            echo Old ID = $OldID
            NewWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo New ID = $NewWorkflowID
            if [[ "$NewWorkflowID" != "$OldID" ]]
            then
              if [ ! -z "$OldID" ]
              then
                echo "$OldID!=$NewWorkflowID => will delete old version"
                aws s3 rm "s3://udapeople-${OldID}" --recursive
                aws cloudformation delete-stack --stack-name "frontend-udapeople-${OldID}"
                aws cloudformation delete-stack --stack-name "backend-udapeople-${OldID}"
              else
                echo "No old ID present."
              fi
            else
              echo "$OldID==$NewWorkflowID => nothing needs to be done..."
            fi
          environment:
            TERM: xterm-256color

workflows:
  default:
    jobs:
      - update-files
      - install-dependencies
      - lint-dockerfile:
        requires: install-dependencies
